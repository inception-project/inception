# Port INCEpTION is listening on
server.port={{ .Values.service.port }}

# If your reverse proxy is running on the same host as {product-name},
# you can use the next line to prevent direct access to INCEpTION from other hosts
server.address=0.0.0.0

# In our examples, we run {product-name} at `your.public.domain.name.com/inception`
# If you want to Run {product-name} directly under the host name without an
# additional path, remove this line
server.servlet.context-path={{ .Values.config.baseUrl }}

# Tell {product-name} which URL your users will enter into their browsers to access it.
# Make sure you have an entry with and an entry without the protocol.
# If you also allow unencrypted http (not recommended) then also add a line with
# the http protocol
wicket.core.csrf.accepted-origins[0]={{ .Values.config.security.acceptedOrigins }}
wicket.core.csrf.accepted-origins[1]=https:/{{ .Values.config.security.acceptedOrigins }}

{{- if .Values.config.allowHttp }}
wicket.core.csrf.accepted-origins[2]=http:/{{ .Values.config.security.acceptedOrigins }}
{{- end }}

{{- if .Values.auth.oauth2.enabled }}
spring.security.oauth2.client.registration.inception-oidc-client.client-name={{ .Values.auth.oauth2.clientName }}
spring.security.oauth2.client.registration.inception-oidc-client.client-id={{ .Values.auth.oauth2.clientID }}
spring.security.oauth2.client.registration.inception-oidc-client.client-secret=${OIDC_CLIENT_SECRET}
spring.security.oauth2.client.registration.inception-oidc-client.scope={{ .Values.auth.oauth2.scope }}
spring.security.oauth2.client.registration.inception-oidc-client.authorization-grant-type={{ .Values.auth.oauth2.authorizationGrantType }}
spring.security.oauth2.client.registration.inception-oidc-client.redirect-uri={{ .Values.auth.oauth2.redirectURI }}
spring.security.oauth2.client.provider.inception-client.issuer-uri={{ .Values.auth.oauth2.issuerURI }}
spring.security.oauth2.client.provider.inception-client.user-name-attribute={{ .Values.auth.oauth2.userNameAttribute }}

{{- if .Values.auth.oauth2.autoLogin }}
security.login.auto-login=inception-oidc-client
{{- end }}
{{- end }}

{{- if .Values.auth.saml2.enabled }}
spring.security.saml2.relyingparty.registration.inception-saml2-client.assertingparty.entity-id={{ .Values.auth.saml2.assertingPartyEntityID }}
spring.security.saml2.relyingparty.registration.inception-saml2-client.assertingparty.verification.credentials[0].certificate-location=file:/srv/inception/keycloak-saml-idp.crt
spring.security.saml2.relyingparty.registration.inception-saml2-client.assertingparty.singlesignon.url={{ .Values.auth.saml2.assertingPartySSOUrl }}
spring.security.saml2.relyingparty.registration.inception-saml2-client.assertingparty.singlesignon.sign-request={{ .Values.auth.saml2.assertingPartySSOUrl }}

{{- if .Values.auth.saml2.autoLogin }}
security.login.auto-login=inception-saml2-client
{{- end }}
{{- end }}

{{- if or (.Values.livenessProbe.enabled) (.Values.readinessProbe.enabled) }}
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
{{- end }}

logging.level.org.springframework.security={{ .Values.config.logging }}
logging.level.de.tudarmstadt.ukp.inception.security={{ .Values.config.logging }}